"use strict";(self.webpackChunkde_co_docs=self.webpackChunkde_co_docs||[]).push([[302],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,h=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(h,a(a({ref:t},u),{},{components:n})):r.createElement(h,a({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},267:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={id:"ho-your-first-token",title:"Lesson 4. Hands-On - Your First Token",sidebar_position:5},l="Lesson 4: Hands-On - Your First Token",c={unversionedId:"into-the-woods/trail2-ergo-coding/ho-your-first-token",id:"into-the-woods/trail2-ergo-coding/ho-your-first-token",title:"Lesson 4. Hands-On - Your First Token",description:"Before we show you the tutorial. Please try writing out some code on your own with the example from previous article. Once you've tried it. Come back to this article, and we will go through it step by step.",source:"@site/docs/into-the-woods/trail2-ergo-coding/6-ho-your-first-token.md",sourceDirName:"into-the-woods/trail2-ergo-coding",slug:"/into-the-woods/trail2-ergo-coding/ho-your-first-token",permalink:"/deco-docs/docs/into-the-woods/trail2-ergo-coding/ho-your-first-token",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"ho-your-first-token",title:"Lesson 4. Hands-On - Your First Token",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Lesson 3. Hands-On - Creating Tx via App Kit",permalink:"/deco-docs/docs/into-the-woods/trail2-ergo-coding/ho-creating-tx-via-app-kit"},next:{title:"Lesson 5. Hands-On - Your first NFT",permalink:"/deco-docs/docs/into-the-woods/trail2-ergo-coding/ho-your-first-nft"}},u={},d=[{value:"Alright, Let&#39;s mint our first token!",id:"alright-lets-mint-our-first-token",level:2}],p={toc:d};function g(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lesson-4-hands-on---your-first-token"},"Lesson 4: Hands-On - Your First Token"),(0,i.kt)("p",null,"Before we show you the tutorial. Please try writing out some code on your own with the example from previous article. Once you've tried it. Come back to this article, and we will go through it step by step."),(0,i.kt)("h2",{id:"alright-lets-mint-our-first-token"},"Alright, Let's mint our first token!"),(0,i.kt)("p",null,"This is purely a token, and not an NFT. NFT will be in the next chapter."),(0,i.kt)("p",null,"So let's start, here's the general steps that were taken from the previous article."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create the ErgoClient"),(0,i.kt)("li",{parentName:"ol"},"Create the BlockchainContext"),(0,i.kt)("li",{parentName:"ol"},"Retrieve the transaction Input Boxes"),(0,i.kt)("li",{parentName:"ol"},"Create the Transaction Builder"),(0,i.kt)("li",{parentName:"ol"},"Create the Token"),(0,i.kt)("li",{parentName:"ol"},"Create the transaction Output Boxes"),(0,i.kt)("li",{parentName:"ol"},"Create the Prover"),(0,i.kt)("li",{parentName:"ol"},"Create the Unsigned Transaction"),(0,i.kt)("li",{parentName:"ol"},"Sign the transaction and retrieve the transaction id")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// 0. Create address\nval yourAddress: Address = Address.create("{Your wallet address}")\n\n// 1. Create the ErgoClient\nval ergoClient: ErgoClient = RestApiErgoClient.create(nodeApiUrl, networkType, nodeApiKey, explorerURL)\n\n// 2. Create the BlockchainContext\nergoClient.execute(ctx: BlockchainContext => {\n    // 3. Retrieve the transaction input box\n    // This input box will be your address.\n    // Therefore we have to pull boxes from your address.\n    val spendingBoxes: List[InputBox] = ctx.getDataSource.getUnspentBoxesFor(yourAddress, 0, 100)\n\n    // 4. Create the TransactionBuilder\n    val txB: UnsignedTransactionBuilder = ctx.newTxBuilder()\n\n    // 5. Create the Token\n    val tokenName: String = "HelloWorld"\n    val tokenDesc: String = "Test Test"\n    val decimals: Long = 0\n    val tokenToMint: ErgoToken = new Eip4Token(\n            spendingBoxes.get(0).getId.toString,\n            1,\n            tokenName,\n            tokenDesc,\n            decimals\n        )\n\n    // 6. Create the OutBox\n    val outBox: OutBox = txB\n      .outBoxBuilder()\n      // Declare value of the OutBox\n      .value(ErgCommons.MinBoxFee)\n      // Mint token in OutBox\n      .mintToken(eip4Token(tokenToMint))\n      // Send back to your address\n      .contract(ContractUtils.sendToPK(yourAddress))\n      .build()\n\n\n    // 7. Create the Prover\n    val prover: ErgoProver = ctx.newProverBuilder()\n        .withMnemonic(\n            SecretString.create(BuyerMnemonic),\n            SecretString.empty()\n        )\n        .build();\n\n    // 8. Create the unsigned transaction\n    val unsignedMintTokenTx: UnsignedTransaction = txBuilder.boxesToSpend(spendingBoxes)\n        .outputs(outBox)\n        .fee(Parameters.MinFee)\n        .sendChangeTo(yourAddress.getErgoAddress)\n        .build();\n\n    // 9. Sign the transaction and retrieve the tx id\n    val signedTx: SignedTransaction = prover.sign(unsignedMintTokenTx)\n    val txId: String = ctx.sendTransaction(signedTx)\n})\n')))}g.isMDXComponent=!0}}]);